'''Assignment 2: Casear's Cipher
Class: Introduction to Computer Science
Due: 3/27/2023

Encrypted Message that I cracked: "Pbzr unat bhg jvgu hf!"
Original Message: "Come hang out with us!"

Decomposition: 
I had to decrypt a message (the one above) by breaking the problem into smaller chunks. 
I created a list of the entire English alphabet, and assigned it numbers 1-26.

Pattern recognition: 
I chose the shortest word "hf" and looked for a two-letter word that would make sense, 
and then noticed that this was an encryption method that shifted each number that was assigned to a letter by 13.

Algorithm Design: 
I decided to make an create a Caesar's Cipher encryption algorithm in python 3 
to encrypt and decrypt any encrypted message that uses this specific encryption method.
I also purposeed created a function that accepts "shift" as an argument; 
therefore, a shift of any number could be applied except for any multiples of 26.

Evaluation:
I created some test code on the bottom to ensure that my code works. 
Update: It works mostly fine, but I'll need to review it in the summer to make sure it decrypts correctly.
'''

import string

'''
# Assigning letters a-z to numbers 1-26
alphabet = string.ascii_lowercase
numbers = {}
for i in range(len(alphabet)):
    numbers[alphabet[i]] = i + 1
print(numbers) #test
'''

def encrypt(original_message, shift):
    alphabet = string.ascii_lowercase
    letters_numbers = {} # Goal is to assign letters a-z to numbers 1-26
    encrypted_message = ""
    
    for i in range(len(alphabet)): # {a = 1, b = 2, ...}
        letters_numbers[alphabet[i]] = i + 1

    for character in original_message: 
       
        if character.lower() in alphabet:
            index = (letters_numbers[character.lower()] + shift - 1) % 26
            encrypted_character = alphabet[index]

            uppercase = character.isupper() # Checks if the characters in my string as uppercase and assigns it to this varable
            if uppercase:
                encrypted_character = encrypted_character.upper()
            encrypted_message += encrypted_character
        else:
            encrypted_message += character

    print(encrypted_message)
    return encrypted_message
encrypt("Come hang out with us!", 13) 
'''
# Test. My code works for encrypting messages, 
# but I tried using the encrypted messages and to try to decrypt it and it didn't work.

encrypt("Come hang out with us!", 13) 
encrypt("Pbzr unat bhg jvgu hf!", 13)
encrypt("Fuck capitalism.", 4)
encrypt("Jygo getmxepmwq.", -4)
encrypt("Fuck capitalism.", 13)
encrypt("Jygo getmxepmwq.", 13)
'''
encrypt("NECC", 8)
encrypt("Tb xob fk Ixtobkzb", -3)
